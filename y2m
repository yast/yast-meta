#!/bin/bash
# vim: sw=2 sts=2 ts=8 et fdm=marker cms=\ #\ %s
#
# y2m - a tool to help with the checkout of the YaST git repos
#
# License: GPL2
# Homepage: http://github.com/yast/yast-meta.git

### HELP START # {{{
# NAME
#     $0 - git wrapper tuned for YaST development
#
# SYNOPSIS
#     $0 list
#     $0 clone ALL | FAV | <module>...
#     $0 read-only ALL | FAV | <module>...
#     $0 pull [ALL | FAV | <module>...]
#     $0 checkout [ALL | FAV | <module>...]
#
# DESCRIPTION
#     $0 (short for "YaST: too many") eases work with (arbitrary
#     subsets of) all YaST module git repositories while maintaining
#     the directory structure of the former svn repo.
#     That is, flat directory, with the "yast-" prefix stripped
#     from directory names.
#
# COMMANDS
#   list, ls
#     $0 list
#
#     List names of all repositories in both github organizations
#     (yast, libyi).
#
#   clone, cl
#   read-only, ro
#     $0 clone ALL | FAV | <module>...
#     $0 read-only ALL | FAV | <module>...
#
#     Clone given modules from github.com/{yast,libyui}/.
#     `clone` uses SSH, `read-only` uses the `git://` scheme.
#     Repositories whose names start with "yast-" are cloned into
#     directories without this prefix.
#
#   pull, up
#     $0 pull ALL | FAV | <module>...
#
#     Run `git pull` in each given module.
#
#   checkout, co
#     $0 checkout <branch> ALL | FAV | <module>...
#
#     Run `git checkout <branch>` in each given module.
#
# MODULE SPECIFICATIONS
#     ALL      - All modules from both organizations
#                (yast/, libyui/).
#     FAV      - Modules named in Y2MFAVORITES.
#     <module> - Basename of a repository name,
#                "yast-" prefix is not necessary.
#
# FILES
#   ~/.y2m
#     Sourced into $0.  May define following parameters:
#
#     Y2MFAVORITES
#       Whitespace-separated list of modules.
#
# RESERVED BRANCH AND TAG NAMES
#   These branch- and tag name prefixes are reserved for openSUSE
#   and SLE releases, do not use them for your own branches/tags.
#
#    - "openSUSE-"
#    - "SLE-"
#    - "Code-"
#
# SEE ALSO
#   git(1),
#   http://github.com/yast,
#   http://github.com/libyui,
#   http://en.opensuse.org/YaST_SVN_to_GIT
#
# AUTHORS
#   YaST developers <yast-devel@opensuse.org>.
#
# BUGS
#   Please report them at <https://github.com/yast/yast-meta/issues>.
### HELP END # }}}

### Y2MCONF START {{{
# # .y2m config file
#
# # Whitespace-separated list of module basenames; modules matching
# # yast/yast-* may be given with or without # the "yast-" prefix).
# # Example:
# # Y2MFAVORITES="core network installation libyui-qt"
# Y2MFAVORITES=""
### Y2MCONF END }}}

# Enable 'set -x' to get debug output (commands and arguments as they are executed):
#set -x

# Make sure to have a clean environment:
PATH="/sbin:/usr/sbin:/usr/bin:/bin"
LC_ALL="POSIX"
LANG="POSIX"
umask 022

# The return value of a pipeline is the status of
# the last command to exit with a non-zero status,
# or zero if no command exited with a non-zero status:
set -o pipefail

MY_NAME=${0##*/}
MY_PATH=$0

Y2MCONF=~/.y2m

# At https://github.com/yast see a repository
# e.g. https://github.com/yast/yast-yast2 which shows those URLs:
# For "SSH": git@github.com:yast/yast-yast2.git
# For "Git Read-Only": git://github.com/yast/yast-yast2.git
declare -Ar urls=(
  [c]=git@github.com:
  [r]=https://github.com/
)

declare -r cachedir=~/.y2mcache

do_clone() # {{{
{
  local remote=${1?} mod=${1##*/} moddir=${2?}
  echo "Testing clone to detect dead modules for $remote..."
  git clone --depth=1 -q $remote $moddir
  if [ `ls $moddir/* | wc -l` -eq 1 ]; then
    echo "Module dropped. Removing it.";
    rm -rf $moddir
    return 0
  fi
  # clean shallow copy
  echo "Unshallowing git repo $moddir..."
  cd $moddir &&
    {
      git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*";
      git pull -q --unshallow;
      cd -;
    }
} # }}}

fetch_repos() # {{{
{
  # TODO cache more aggressively, query github only once in a while
  printf "Fetching repository names..."
  for org in libyui yast; do
    get_repos $org
    printf .
  done
  echo
} # }}}

get_repos() # {{{
{
  local org=${1?}
  local rv=0 pg=1

  mkdir -p $cachedir || {
    echo "$MY_NAME: mkdir -p $cachedir failed"
    exit 1
  } >&2

  while (( 0 == rv )); do
    get_repos_page $org $pg
    rv=$?
    pg=$((pg + 1))
  done
  if (( 2 < rv )); then
    echo "error listing repositories in github"
    exit 1
  fi >&2
  if (( 1 == rv )); then
    while test -f $cachedir/$org.$pg.curldump; do
      rm $cachedir/$org.$pg.*
      pg=$((pg + 1))
    done
    sort $cachedir/$org.*.repos > $cachedir/$org.repos
  fi
} # }}}

get_repos_page() # {{{
{
  local org=${1?}
  local pg=${2?}
  local pglen=100

  local headersfile=$cachedir/$org.$pg.headers
  local responsefile=$cachedir/$org.$pg.output
  local reposfile=$cachedir/$org.$pg.repos
  local curldump=$cachedir/$org.$pg.curldump

  local url="https://api.github.com/orgs/${org}/repos?page=${pg}&per_page=${pglen}"

  local etag=$(
    test -f $headersfile \
    && sed -n 's/^ETag: \("[^"]*"\).*/\1/p' $headersfile
  )

  curl --silent --verbose --show-error \
    --netrc \
    --dump-header $headersfile \
    --output $responsefile \
    ${etag:+--header 'If-None-Match: '$etag} \
    --url $url 2> $curldump
  local rv=$?
  if (( 0 != rv )); then
    (( 2 >= rv )) && ((rv += 10))
    return $rv
  fi
  local status=$(head -1 $headersfile)
  case "$status" in
  (HTTP/*\ 200\ *) ;;
  (HTTP/*\ 304\ *) return 2 ;;
  (*) return 22 ;;
  esac
  sed -n -e '/"name":/s/^.*"name": "\([^"]*\)",.*$/\1/p' $responsefile \
  | sort \
  > $reposfile.tmp
  local rcnt=$(wc -l < $reposfile.tmp)
  mv $reposfile.tmp $reposfile
  (( rcnt == pglen )) || return 1
} # }}}

have_copy() # {{{
{
  local wanted=${1?} m=${2?}
  case "$wanted" in
  -y|--yes)
    test -d "$m" || {
      echo "Repo does not exist: $m"
      return 1
    }
  ;;
  -n|--no)
    test -d "$m" && {
      echo "Repo already cloned: $m"
      return 1
    }
  ;;
  *)
    echo "$MY_NAME: internal error; have_copy called with $@."
    exit 1
  ;;
  esac
  return 0
} >&2 # }}}

createconfig() # {{{
{
  print_section Y2MCONF > ${1:?}
} # }}}

print_section() # {{{
{
  local -r s="${1?}" self=${MY_NAME?}
  local -r cfg=$(echo $Y2MCONF | sed -e 's,^'$HOME',~,')
  sed -rnf - ${MY_PATH?} <<EOSED
    /^### $s START/,/^### $s END/ {
      s:\\\$0:$self:
      s:\\\$Y2MCONF:$cfg:
      s:^#( |$)::p
    }
EOSED
} # }}}

y2m-help() # {{{
{
  print_section HELP | ${PAGER:-less}
} # }}}
y2m-list() # {{{
{
  fetch_repos

  local org

  for org in yast libyui; do
    echo "Modules in '$org':"
    xargs < $cachedir/$org.repos | fold -sw 78
  done
} # }}}
y2m-clone() # {{{
{
  [[ $# -eq 0 ]] && {
    echo "usage: $MY_NAME $CMD ALL | FAV | <module>..."
    exit 1
  } >&2

  fetch_repos

  local -r url=${urls[${CMD:0:1}]}
  local org mod lmod

  if [[ $# -eq 1 && $1 == ALL ]]; then

    for org in libyui yast; do
      while read mod; do
        echo "Cloning module $mod"
        lmod=${mod#yast-}
        have_copy -n $lmod || continue
        do_clone "$url$org/$mod" $lmod
      done < $cachedir/$org.repos
    done

  else

    [[ $# -eq 1 && $1 == FAV ]] && {
      set -- $Y2MFAVORITES
    }

    for lmod in $*; do
      org=$(basename $(grep -Flwe $lmod $cachedir/{libyui,yast}.repos) .repos)
      mod=$(grep -Ehwe "$lmod\$" $cachedir/{libyui,yast}.repos)
      lmod=${lmod#yast-}
      have_copy -n $lmod || continue
      do_clone "$url$org/$mod" $lmod
    done

  fi
} # }}}
y2m-pull() # {{{
{
  local lmod

  [[ $# -eq 1 && $1 == FAV ]] && {
    set -- $Y2MFAVORITES
  }

  for lmod in ${*-*}; do
    lmod=${lmod#yast-}
    have_copy -y $lmod || continue
    (cd $lmod && git pull)
  done
} # }}}
y2m-checkout() # {{{
{
  local branch=$1
  local lmod
  shift

  [[ $# -eq 1 && $1 == FAV ]] && {
    set -- $Y2MFAVORITES
  }

  for lmod in ${*-*}; do
    lmod=${lmod#yast-}
    have_copy -y $lmod || continue
    GIT_WORK_TREE=$lmod GIT_DIR=$lmod/.git git checkout $branch
  done
} # }}}

[[ $# -eq 0 ]] && {
  y2m-help
  exit 1
}

[ -f $Y2MCONF ] || createconfig $Y2MCONF
# overwrite variables that are set in the config
[ -f $Y2MCONF ] && . $Y2MCONF

CMD=$1
shift

case $CMD in
--help|help)              y2m-help        "$@" ;;
li|list)                  y2m-list        "$@" ;;
cl|clone|ro|read-only)    y2m-clone       "$@" ;;
up|pull)                  y2m-pull        "$@" ;;
br|co|checkout)           y2m-checkout    "$@" ;;
*)
  echo "Error: Unknown command: $CMD"
  echo "Run '$MY_NAME help' for more information."
  exit 1
;;
esac

